[{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://gesistsa.github.io/rang/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://gesistsa.github.io/rang/articles/compendium.html","id":"case-1-create-a-turing-style-research-compendium","dir":"Articles","previous_headings":"","what":"Case 1: Create a Turing-style research compendium","title":"Create research compendia","text":"create_turing() can used create general research compendium structure. function generates example structure like : information can found Turing Way. general: Raw data directory data_raw Scripts directory code, preferably named execution order. scripts generate intermediate data files data_intermediate, figures figures. code execution, file manuscript written literate programming techniques. case, Paper.Rmd. special part inst/rang/update.R. Running script following things: scans current directory R packages used. creates infrastructure building Docker image run code. caches R packages. written file, edit script cater needs. might also need run multiple time project lifecycle. can also use Makefile included pull tasks. example, can run make update run inst/rang/update.R. highly recommend using GNU Make. first step run inst/rang/update.R. can either run Rscript inst/rang/update.R make update. determine snapshot date, scan current directory R dependencies, determine dependency graph, generate Dockerfile, cache R packages. running , Dockerfile root level. inst/rang, rang.R cache. Now, can build Docker image. recommend using GNU Make type make build (docker build -t yourprojectimg .). launch Docker container (make launch docker run --rm --name \"yourprojectcontainer\" -ti yourprojectimg). Another idea launch Bash shell (make bash docker run --rm --name \"yourprojectcontainer\" --entrypoint bash -ti yourprojectimg). Let’s assume take approach. Inside container, get files. container dependencies installed can run scripts right away. Let’s say can copy artefact generated inside container another shell instance.","code":". ├── bibliography.bib ├── CITATION ├── code │   ├── 00_preprocess.R │   └── 01_visualization.R ├── data_clean ├── data_raw │   └── penguins_raw.csv ├── figures ├── .here ├── inst │   └── rang │       └── update.R ├── Makefile └── paper.Rmd Rscript code/00_preprocess.R  Rscript code/01_visualization.R  Rscript -e \"rmarkdown::render('paper.Rmd')\" docker cp yourprojectcontainer:/paper.pdf ./"},{"path":"https://gesistsa.github.io/rang/articles/compendium.html","id":"other-ideas","dir":"Articles","previous_headings":"Case 1: Create a Turing-style research compendium","what":"Other ideas","title":"Create research compendia","text":"Add readme: usethis::use_readme() Add license: usethis::use_mit_license() Add steps run code Makefile, ’ll need rerun make build. Export Docker image: make export restore make restore","code":""},{"path":"https://gesistsa.github.io/rang/articles/compendium.html","id":"case-2-enhance-an-existing-research-compendium","dir":"Articles","previous_headings":"","what":"Case 2: Enhance an existing research compendium","title":"Create research compendia","text":"Oser et al. shared data zip file OSF. can obtain copy using osfr. Suppose want use Apptainer reproduce research. root level compendium, run: compendium slightly tricky know one undeclared GitHub package. need edit inst/rang/update.R . case, also want fix snapshot_date. Also, know “texlive” needed. can also edit Makefile give project handle. Maybe “oser” good handle. Similar , first run make build build Apptainer image. handle “oser”, generates Apptainer image called “oserimg.sif”. Similar , can now launch bash shell render RMarkdown file. Upon exit, “output.html” host machine. don’t need transfer file container. Please note feature handy can also negative impact reproducibility.","code":"Rscript -e \"osfr::osf_download(osfr::osf_retrieve_file('https://osf.io/y7cg5'))\" unzip meta-analysis\\ replication\\ files.zip cd meta-analysis Rscript -e \"rang::use_rang(apptainer = TRUE)\" pkgs <- as_pkgrefs(here::here()) pkgs[pkgs == \"cran::dmetar\"] <- \"MathiasHarrer/dmetar\"  rang <- resolve(pkgs,                 snapshot_date = \"2021-08-11\",                 verbose = TRUE)  apptainerize(rang, output_dir = here::here(), verbose = TRUE, cache = TRUE,              post_installation_steps = c(recipes[[\"make\"]], recipes[[\"clean\"]]),              insert_readme = FALSE,              copy_all = TRUE,              cran_mirror = cran_mirror) handle=oser .PHONY: update build launch bash daemon stop export make bash Rscript -e \"rmarkdown::render('README.Rmd', output_file = 'output.html')\" exit"},{"path":"https://gesistsa.github.io/rang/articles/compendium.html","id":"what-to-share","dir":"Articles","previous_headings":"","what":"What to share?","title":"Create research compendia","text":"important know least two levels reproducibility: 1) Whether computational environment can reproducibly reconstructed, 2) Whether analysis reproducibility. discussion reproducibility usually conflates two. want focus 2nd goal. goal ensure researchers can compatible computational environment can (re)run code, Turing Way recommends one share research compendium container images, just recipes e.g. Dockerfile container.def. many moving parts reconstruction, e.g. whether source Docker image available usable. long Docker Apptainer support image format (allow upgrade current format), sharing images future proof method.","code":""},{"path":"https://gesistsa.github.io/rang/articles/faq.html","id":"general-questions","dir":"Articles","previous_headings":"","what":"General questions","title":"FAQ","text":"GQ1: Tell 10 lines use package. GA1: Get dependency graph several R packages CRAN Github specific snapshot date(time) Dockerize dependency graph directory can build Docker image either R package stevedore Docker CLI client. use CLI client. Launch container built image tenth line needed. GQ2: running resolve(), know packages used project? GA2: rang >= 0.2 supports scanning directory R packages (current working directory default). snapshot_date inferred latest modification date files. better strategy, however, scanning first manually review packages non-CRAN sources. GQ3: R script generated dockerize() export_rang() strange/unidiomatic/inefficient/guys read fortunes::fortune(\"answer parse\")? GA3: optimize R code rang.R backward compatibility. need make sure code runs well vanilla R environments since 1.3.1. GQ4: doesn’t rang support reconstructing computational environments R < 2.1.0 1.3.1 yet? GA4: installing source packages within R introduced R 2.1.0. one needed install source packages R CMD INSTALL. working supporting R 1.x series. Support R 1.x series available rang >= 0.2. R version older 1.3.1 still supported haven’t found effectiveness way automatically compile R < 1.3.1. GQ5: rang.R (generated export_rang() dockerize()) run non-Linux OSes? GA5: Theoretically speaking, yes. strongly recommended. system requirements fulfilled, rang.R probably run fine OS X R packages contain compiled code. C Fortran compilers needed case. See entry R Mac OS X FAQ. Windows, installing Github packages requires properly set PATH tar. Similarly, R packages compiled code require C / Fortran compilers. See entry R Windows FAQ. GQ6: caveats using rang? GA6: Many rang support reconstructing computational environments R < 1.3.1 (.e. snapshot_date < “2001-08-31 14:58”) yet dockerize() can generate Debian/Ubuntu-based Docker images; also means packages depending non-Linux specific features (e.g. WinBUGS) work. dockerize(cache = TRUE) cache R source code (yet) (available rang >= 0.2.1) System Requirements (deb packages) Removed CRAN packages assumed System Requirements R Packages changed System Requirements snapshot_date date running resolve() might produce incorrect System Requirements R version < 3.1 least one Github package. outdated version Debian communicate Github API R version < 3.3 least one Bioconductor package, reason. least one local package. R version < 2.1 R packages Github, CRAN, Bioconductor might available near future (Github: likely; CRAN Bioconductor: unlikely). one can cache packages (dockerize(cache = TRUE)). Rocker project host Docker Hub might available near future (unlikely) Ubuntu / Debian archives (System Requirements) might available future (super unlikely) GQ7: rang depends R >= 3.5.0. Several dependencies depend many modern R packages. dare claiming package supports R >= 1.3.1? GA7: clarify, true resolve() dockerize() depend many factors, including modern version R. reconstruction process (caching R packages) depends availability Docker images Docker Hub, availability R source code CRAN (R < 3.1.0), deb packages Ubuntu Debian future. don’t believe , see also: DQ4. GQ8: data sources resolve()? GA8: Several Dependencies / R version / System Requirements CRAN packages: r-hub APIs pkgsearch r-versions sysreqs Github: Github API Dependencies Bioconductor packages: Bioconductor GQ9: convinced package. alternatives? GA9: don’t consider Dockerization part rang, date-based pinning R packages can done : Using Posit Public Package Manager Using groundhog don’t consider date-based pinning R packages, Dockerization can done : Using containerit [CRAN] Using dockerfiler GQ10: want know package. GA10: Good. Read preprint.","code":"graph <- resolve(c(\"crsh/papaja\", \"rio\"), snapshot_date = \"2019-07-21\") dockerize(graph, output_dir = \"rangtest\") docker build -t rangimg ./rangtest ## might need sudo docker run --rm --name \"rangcontainer\" -ti rangimg resolve() pkgs <- as_pkgrefs(\".\") library(pak) options(repos = c(REPO_NAME = \"https://packagemanager.rstudio.com/cran/2019-07-21\")) pkg_install(\"rio\") pkg_install(\"crsh/papaja\") library(groundhog) pkgs <- c(\"rio\",\"crsh/papaja\") groundhog.library(pkgs, \"2019-07-21\") library(containerit) ## combine with Package Manager to pin packages by date install.packages(\"rio\") remotes::install_github(\"crsh/papaja\") library(rio) library(papaja) print(containerit::dockerfile(from = utils::sessionInfo())) library(dockerfiler) my_dock <- Dockerfile$new() ## combine with Package Manager to pin packages by date my_dock$RUN(r(install.packages(c(\"remotes\", \"rio\")))) my_dock$RUN(r(remotes::install_github(\"crsh/papaja\"))) my_dock"},{"path":"https://gesistsa.github.io/rang/articles/faq.html","id":"docker-questions","dir":"Articles","previous_headings":"","what":"Docker questions","title":"FAQ","text":"DQ1: Docker overkill simply ensure lines R code reproducible? DA1: might case recent R code, e.g. R >= 3.0 (snapshot_date > “2013-04-03 09:10”). position rang archaeological tool run really old R code (snapshot_date >= “2005-04-19 09:01”, see GQ4). , Docker essential R 2.x/1.x series might installable anymore non-virtualized environment. According Turing Way, research compendium aids computational reproducibility contain complete description computational environment. directory exported dockerize(), especially materials_dir cache used, can directly shared research compendium. DQ2: access bash instead R? DA2: default, containers launched images generated rang goes R. One can override launching container alternative entry point. Suppose image built per GA1. DQ3: copy files launched container? DA3: image built per GA1 launched want emphasize launching container --name useful name container randomly generated --name used launch . also important remind relaunched container goes back initial state. file generated inside container previously removed. use docker cp copy artifact one wants preserve artifact. DQ4: back image? DA4: don’t believe Docker Hub / Debian archives / Ubuntu archives available forever, may back generated image. can also share back gzipped tarball file (usually < 1G, depending size materials_dir, thus shareable Zenodo). restore backup image: launch container way","code":"docker run --rm --name \"rangcontainer\" --entrypoint bash -ti rangimg docker run --rm --name \"rangcontainer\" -ti rangimg # probably you need to run this from another terminal docker cp rangcontainer:/rang.R rang2.R docker cp rang2.R rangcontainer:/rang2.R docker save rangimg | gzip > rangimg.tar.gz docker load < rangimg.tar.gz docker run --rm --name \"rangcontainer\" -ti rangimg"},{"path":"https://gesistsa.github.io/rang/articles/faq.html","id":"apptainersingularity-questions","dir":"Articles","previous_headings":"","what":"Apptainer/Singularity questions","title":"FAQ","text":"AQ1: HPC don’t Docker . Can use Apptainer/Singularity instead Docker? AA1: Docker may require root privileges usually available HPC. might Singularity Apptainer instead. Apptainer/Singularity require root run images (build ). can build images Linux PC (VirtualBox Windows macOS), virtual private server, also free cloud. two options: can prepare (using dockerize()) build Docker image convert Apptainer/Singularity image. See Apptainer/Singularity documentation . can use apptainerize() function just like use dockerize(). Afterwards build image: run container: stop container done just quit R. apptainer singularity shell commands interchangeable, least now. See Apptainer Singularity compatibility details. apptainerize()/singularize() functions work exactly dockerize(), except cache Linux distribution rootfs. AQ2: want run RStudio IDE container instead just CLI R? AA2: run RStudio IDE Apptainer/Singularity container, writeable folders config file created locally: , can run container (run root user, otherwise able login RStudio IDE). Start instance (default RSTUDIO port 8787): Now open browser go localhost:8787. default username local username, default password ‘set_your_password’ (using container generated rang). List running instances: Stop instance: Start instance custom port (e.g. 8080) password: Run container custom rserver command line: run container using apptainer exec command, kill rserver process manually Cmd/Ctrl+C running container stop server.","code":"apptainerize(graph, output_dir = \"rangtest\") cd rangtest apptainer build container.sif container.def # sudo singularity build container.sif container.def # same as above apptainer exec container.sif R # singularity exec container.sif R # same as above mkdir -p run var-lib-rstudio-server .rstudio printf 'provider=sqlite\\ndirectory=/var/lib/rstudio-server\\n' > database.conf apptainer instance start \\     --bind run:/run,var-lib-rstudio-server:/var/lib/rstudio-server,database.conf:/etc/rstudio/database.conf,.rstudio:/home/rstudio/.rstudio/ \\     container.sif \\     rangtest apptainer instance list apptainer instance stop rangtest apptainer instance start \\     --env RPORT=8080     --env PASSWORD='set_your_password' \\     --bind run:/run,var-lib-rstudio-server:/var/lib/rstudio-server,database.conf:/etc/rstudio/database.conf,.rstudio:/home/rstudio/.rstudio/ \\     container.sif \\     rangtest apptainer exec \\     --env PASSWORD='set_your_password' \\     --bind run:/run,var-lib-rstudio-server:/var/lib/rstudio-server,database.conf:/etc/rstudio/database.conf,.rstudio:/home/rstudio/.rstudio/ \\     container.sif \\     /usr/lib/rstudio-server/bin/rserver \\     --auth-none=0 --auth-pam-helper-path=pam-helper \\     --server-user=$(whoami) --www-port=8787"},{"path":"https://gesistsa.github.io/rang/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Chung-hong Chan. Author, maintainer. David Schoch. Author. Egor Kotov. Contributor.","code":""},{"path":"https://gesistsa.github.io/rang/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chan C, Schoch D (2023). “rang: Reconstructing reproducible R computational environments.” PLOS ONE. doi:10.1371/journal.pone.0286761, https://github.com/gesistsa/rang.","code":"@Article{,   title = {rang: Reconstructing reproducible R computational environments},   journal = {PLOS ONE},   author = {Chung-hong Chan and David Schoch},   url = {https://github.com/gesistsa/rang},   year = {2023},   doi = {10.1371/journal.pone.0286761}, }"},{"path":"https://gesistsa.github.io/rang/index.html","id":"rang-","dir":"","previous_headings":"","what":"Reconstructing Reproducible R Computational Environments","title":"Reconstructing Reproducible R Computational Environments","text":"goal rang (Reconstructing Ancient Number-crunching Gears) [1] obtain dependency graph R packages specific time point. Although package can also used ensure current R computational environment can reconstructed future researchers, package gears towards reconstructing historical R computational environments completely declared. former purpose, packages renv, groundhog, miniCRAN, Require used. One can think rang archaeological tool. reconstruct historical R computational environment, package assumes availability source packages online. reconstruction procedures tested several vintage versions R. Please cite package : Chan CH, Schoch D (2023) rang: Reconstructing reproducible R computational environments. PLOS ONE https://doi.org/10.1371/journal.pone.0286761","code":""},{"path":"https://gesistsa.github.io/rang/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Reconstructing Reproducible R Computational Environments","text":"can install development version rang like : stable CRAN version","code":"remotes::install_github(\"gesistsa/rang\") install.packages(\"rang\")"},{"path":"https://gesistsa.github.io/rang/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Reconstructing Reproducible R Computational Environments","text":"obtain dependency graph R packages, use resolve. Currently, package supports CRAN, Bioconductor, GitHub, local packages. resolved result S3 object called rang can exported installation script. installation script can execute vanilla R installation. However, execution installation script often fails (now) due missing system dependencies incompatible R versions. Therefore, approach outlined used.","code":"library(rang) x <- resolve(pkgs = c(\"sna\", \"schochastics/rtoot\", \"S4Vectors\"), snapshot_date = \"2022-11-30\") graph <- resolve(pkgs = c(\"openNLP\", \"LDAvis\", \"topicmodels\", \"quanteda\"),                  snapshot_date = \"2020-01-16\") graph #> resolved: 4 package(s). Unresolved package(s): 0  #> $`cran::openNLP` #> The latest version of `openNLP` [cran] at 2020-01-16 was 0.2-7, which has 3 unique dependencies (2 with no dependencies.) #>  #> $`cran::LDAvis` #> The latest version of `LDAvis` [cran] at 2020-01-16 was 0.3.2, which has 2 unique dependencies (2 with no dependencies.) #>  #> $`cran::topicmodels` #> The latest version of `topicmodels` [cran] at 2020-01-16 was 0.2-9, which has 7 unique dependencies (5 with no dependencies.) #>  #> $`cran::quanteda` #> The latest version of `quanteda` [cran] at 2020-01-16 was 1.5.2, which has 63 unique dependencies (33 with no dependencies.) graph$sysreqs #> [1] \"apt-get install -y default-jdk\" \"apt-get install -y libxml2-dev\" #> [3] \"apt-get install -y make\"        \"apt-get install -y zlib1g-dev\"  #> [5] \"apt-get install -y libpng-dev\"  \"apt-get install -y libgsl0-dev\" #> [7] \"apt-get install -y libicu-dev\"  \"apt-get install -y python3\" graph$r_version #> [1] \"3.6.2\" export_rang(graph, \"rang.R\")"},{"path":"https://gesistsa.github.io/rang/index.html","id":"recreate-the-computational-environment-via-rocker","dir":"","previous_headings":"","what":"Recreate the computational environment via Rocker","title":"Reconstructing Reproducible R Computational Environments","text":"rang object can used recreate computational environment via Rocker. Please note oldest R version one can get Rocker R 3.1.0. Now, can build run Docker container. Using example, sessionInfo() outputs following. successfully gone back pre-pandemic time.","code":"dockerize(graph, \"~/rocker_test\") cd ~/rocker_test docker build -t rang . docker run --rm --name \"rangtest\" -ti rang R version 3.6.2 (2019-12-12) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Debian GNU/Linux 10 (buster)  Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.3.5.so  locale:  [1] LC_CTYPE=en_US.UTF-8          LC_NUMERIC=C                   [3] LC_TIME=en_US.UTF-8           LC_COLLATE=en_US.UTF-8         [5] LC_MONETARY=en_US.UTF-8       LC_MESSAGES=C                  [7] LC_PAPER=en_US.UTF-8          LC_NAME=en_US.UTF-8            [9] LC_ADDRESS=en_US.UTF-8        LC_TELEPHONE=en_US.UTF-8      [11] LC_MEASUREMENT=en_US.UTF-8    LC_IDENTIFICATION=en_US.UTF-8  attached base packages: [1] stats     graphics  grDevices utils     datasets  methods   base       other attached packages: [1] topicmodels_0.2-9 LDAvis_0.3.2      openNLP_0.2-7     quanteda_1.5.2     loaded via a namespace (and not attached):  [1] NLP_0.2-0           Rcpp_1.0.3          pillar_1.4.3         [4] compiler_3.6.2      tools_3.6.2         stopwords_1.0        [7] lubridate_1.7.4     lifecycle_0.1.0     tibble_2.1.3        [10] gtable_0.3.0        lattice_0.20-38     pkgconfig_2.0.3     [13] rlang_0.4.2         Matrix_1.2-18       fastmatch_1.1-0     [16] parallel_3.6.2      openNLPdata_1.5.3-4 rJava_0.9-11        [19] xml2_1.2.2          stringr_1.4.0       stats4_3.6.2        [22] grid_3.6.2          data.table_1.12.8   R6_2.4.1            [25] ggplot2_3.2.1       spacyr_1.2          magrittr_1.5        [28] scales_1.1.0        modeltools_0.2-22   colorspace_1.4-1    [31] stringi_1.4.5       RcppParallel_4.4.4  lazyeval_0.2.2      [34] munsell_0.5.0       tm_0.7-7            slam_0.1-47         [37] crayon_1.3.4"},{"path":"https://gesistsa.github.io/rang/index.html","id":"caching-r-packages","dir":"","previous_headings":"Recreate the computational environment via Rocker","what":"Caching R packages","title":"Reconstructing Reproducible R Computational Environments","text":"One can also cache (archive) R packages CRAN Github time dockerize executed. cached R packages transfer container. Please note system requirements (.e. deb packages) cached.","code":"dockerize(graph, \"~/rocker_test\", cache = TRUE)"},{"path":"https://gesistsa.github.io/rang/index.html","id":"using-alternative-rocker-images","dir":"","previous_headings":"Recreate the computational environment via Rocker","what":"Using alternative Rocker images","title":"Reconstructing Reproducible R Computational Environments","text":"One can also select Rocker versioned images: rstudio, tidyverse, verse, geospatial. tidyverse, verse, geospatial similar default (r-ver). rstudio, one needs build launch : browser, go : local:8787. default username rstudio, password specified.","code":"dockerize(graph, \"~/rocker_test\", image = \"rstudio\") cd ~/rocker_test docker build -t rang . docker run -p 8787:8787 -e PASSWORD=abc123 --rm --name \"rangtest\" -ti rang"},{"path":"https://gesistsa.github.io/rang/index.html","id":"using-apptainersingularity-containers","dir":"","previous_headings":"Recreate the computational environment via Rocker","what":"Using Apptainer/Singularity containers","title":"Reconstructing Reproducible R Computational Environments","text":"rang object can used recreate computational environment via Rocker. Instead Docker can also use Apptainer/Singularity. Please note oldest R version one can get Rocker R 3.1.0. Now, can build run Apptainer/Singularity container. Apptainer installation: Singularity installation: Using example, sessionInfo() outputs following. successfully gone back pre-pandemic. apptainerize()/singularize() functions work exactly dockerize(), except cache Linux distribution rootfs.","code":"apptainerize(graph, \"~/rocker_test\") # singularize(graph, \"~/rocker_test\") # same function, as so far Apptainer is identical to Singularity cd ~/rocker_test apptainer build container.sif container.def apptainer run container.sif R cd ~/rocker_test sudo singularity build container.sif container.def singularity run container.sif R R version 3.6.2 (2019-12-12) -- \"Dark and Stormy Night\" Copyright (C) 2019 The R Foundation for Statistical Computing Platform: x86_64-pc-linux-gnu (64-bit)  R is free software and comes with ABSOLUTELY NO WARRANTY. You are welcome to redistribute it under certain conditions. Type 'license()' or 'licence()' for distribution details.  R is a collaborative project with many contributors. Type 'contributors()' for more information and 'citation()' on how to cite R or R packages in publications.  Type 'demo()' for some demos, 'help()' for on-line help, or 'help.start()' for an HTML browser interface to help. Type 'q()' to quit R.  > sessionInfo() R version 3.6.2 (2019-12-12) Platform: x86_64-pc-linux-gnu (64-bit) Running under: Debian GNU/Linux 10 (buster)  Matrix products: default BLAS/LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.3.5.so  locale:  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=C  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C  [9] LC_ADDRESS=C               LC_TELEPHONE=C [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C  attached base packages: [1] stats     graphics  grDevices utils     datasets  methods   base  loaded via a namespace (and not attached): [1] compiler_3.6.2"},{"path":"https://gesistsa.github.io/rang/index.html","id":"apptainersingularity-with-rstudio-ide","dir":"","previous_headings":"Recreate the computational environment via Rocker","what":"Apptainer/Singularity with RStudio IDE","title":"Reconstructing Reproducible R Computational Environments","text":"run RStudio IDE Apptainer/Singularity container, writeable folders config file created locally: , can run container (run root user, otherwise able login RStudio IDE). Start instance (default RSTUDIO port 8787): Now open browser go localhost:8787. default username local username, default password ‘set_your_password’ (using container generated rang). List running instances: Stop instance: Start instance custom port (e.g. 8080) password: Run container custom rserver command line: run container using apptainer exec command, kill rserver process manually Cmd/Ctrl+C running container stop server.","code":"mkdir -p run var-lib-rstudio-server .rstudio printf 'provider=sqlite\\ndirectory=/var/lib/rstudio-server\\n' > database.conf apptainer instance start \\     --bind run:/run,var-lib-rstudio-server:/var/lib/rstudio-server,database.conf:/etc/rstudio/database.conf,.rstudio:/home/rstudio/.rstudio/ \\     container.sif \\     rangtest apptainer instance list apptainer instance stop rangtest apptainer instance start \\     --env RPORT=8080     --env PASSWORD='set_your_password' \\     --bind run:/run,var-lib-rstudio-server:/var/lib/rstudio-server,database.conf:/etc/rstudio/database.conf,.rstudio:/home/rstudio/.rstudio/ \\     container.sif \\     rangtest apptainer exec \\     --env PASSWORD='set_your_password' \\     --bind run:/run,var-lib-rstudio-server:/var/lib/rstudio-server,database.conf:/etc/rstudio/database.conf,.rstudio:/home/rstudio/.rstudio/ \\     container.sif \\     /usr/lib/rstudio-server/bin/rserver \\     --auth-none=0 --auth-pam-helper-path=pam-helper \\     --server-user=$(whoami) --www-port=8787"},{"path":"https://gesistsa.github.io/rang/index.html","id":"recreate-the-computational-environment-for-r--310","dir":"","previous_headings":"","what":"Recreate the computational environment for R < 3.1.0","title":"Reconstructing Reproducible R Computational Environments","text":"rang can still used recreate computational environments R < 3.1.0. Dockerfile generated based Debian Lenny (5.0) requested version R compiled source. writing, method works R < 3.1.0 R < 1.3.1. image parameter ignored case.","code":"rang_rio <- resolve(\"rio\", snapshot_date = \"2013-08-30\") ## R 3.0.1 dockerize(rang_rio, output_dir = \"~/old_renviron\")"},{"path":"https://gesistsa.github.io/rang/index.html","id":"evercran-support-experimental","dir":"","previous_headings":"","what":"evercran support (experimental)","title":"Reconstructing Reproducible R Computational Environments","text":"rang supports evercran. writing, support still experimental (just like evercran ). future, evercran replace Debian method.","code":"rang_rio <- resolve(\"rio\", snapshot_date = \"2013-08-30\") ## R 3.0.1 dockerize(rang_rio, output_dir = \"~/old_renviron\", method = \"evercran\")"},{"path":"https://gesistsa.github.io/rang/index.html","id":"acknowledgment","dir":"","previous_headings":"","what":"Acknowledgment","title":"Reconstructing Reproducible R Computational Environments","text":"logo rang remix public domain image. two dogs Presa Canario, native dog breed islands Gran Canaria Tenerife. stands “R Archiving Nerds GESIS”. package previously named gran, decided rename rang another package named gRAN.","code":""},{"path":"https://gesistsa.github.io/rang/reference/apptainerize.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Apptainer/Singularity Definition File of The Resolved Result — apptainerize","title":"Create an Apptainer/Singularity Definition File of The Resolved Result — apptainerize","text":"function exports result resolve() Apptainer/Singularity definition file. R version >= 3.1.0, file based versioned Rocker Docker image. R version < 3.1.0, Apptainer/Singularity definition based Debian compiles R source.","code":""},{"path":"https://gesistsa.github.io/rang/reference/apptainerize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Apptainer/Singularity Definition File of The Resolved Result — apptainerize","text":"","code":"apptainerize(   rang,   output_dir,   materials_dir = NULL,   post_installation_steps = NULL,   image = c(\"r-ver\", \"rstudio\", \"tidyverse\", \"verse\", \"geospatial\"),   rang_as_comment = TRUE,   cache = FALSE,   verbose = TRUE,   lib = NA,   cran_mirror = \"https://cran.r-project.org/\",   check_cran_mirror = TRUE,   bioc_mirror = \"https://bioconductor.org/packages/\",   no_rocker = FALSE,   debian_version = c(\"lenny\", \"squeeze\", \"wheezy\", \"jessie\", \"stretch\"),   skip_r17 = TRUE,   insert_readme = TRUE,   copy_all = FALSE,   method = c(\"auto\", \"evercran\", \"rocker\", \"debian\") )  apptainerize_rang(...)  apptainerise(...)  apptainerise_rang(...)  singularize(...)  singularize_rang(...)  singularise(...)  singularise_rang(...)"},{"path":"https://gesistsa.github.io/rang/reference/apptainerize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Apptainer/Singularity Definition File of The Resolved Result — apptainerize","text":"rang output resolve() output_dir character, put Apptainer/Singularity definition file associated content materials_dir character, path directory containing additional resources (e.g. analysis scripts) copied output_dir turn Apptainer/Singularity container post_installation_steps character, additional steps added end %post section Apptainer/Singularity definition file, see example image character, versioned Rocker image use. Can \"r-ver\", \"rstudio\", \"tidyverse\", \"verse\", \"geospatial\" applies R version >= 3.1 rang_as_comment logical, whether write resolved result steps reproduce file path comment cache logical, whether cache packages now. Please note system requirements cached. query non-CRAN packages, option strongly recommended. query local packages, must TRUE regardless R version. R version < 3.1, must also TRUE non-CRAN packages. verbose logical, pass install.packages(), negated value also passed quiet install.packages() download.file(). lib character, pass install.packages(). default, NA (install packages default location) cran_mirror character, CRAN mirror use check_cran_mirror logical, whether check CRAN mirror bioc_mirror character, Bioconductor mirror use no_rocker logical, whether skip using Rocker images even appropriate version available. Please keep FALSE unless know debian_version Rocker images used, EOL version Debian use. Can \"lenny\", \"etch\", \"squeeze\", \"wheezy\", \"jessie\", \"stretch\". Please keep default \"lenny\" unless know skip_r17 logical, whether skip R 1.7.x. Currently, possible compile R 1.7.x (R 1.7.0 R 1.7.1) method provided  rang. affects snapshot_date 2003-04-16 2003-10-07. skip_r17 TRUE snapshot_date within aforementioned range, R 1.8.0 used instead insert_readme logical, whether insert README file copy_all logical, whether copy everything current directory container. inst/rang detected output_dir, coerced TRUE. method character, can \"auto\", \"evercran\", \"rocker\", \"debian\". Select base image used. \"auto\" (default) selects best option based R version. \"evercran\" experimental. ... arguments passed apptainerize","code":""},{"path":"https://gesistsa.github.io/rang/reference/apptainerize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an Apptainer/Singularity Definition File of The Resolved Result — apptainerize","text":"output_dir, invisibly","code":""},{"path":"https://gesistsa.github.io/rang/reference/apptainerize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Apptainer/Singularity Definition File of The Resolved Result — apptainerize","text":"idea behind determine installation order R packages locally. , installation script can deployed another fresh R session install R packages. dockerize() apptainerize() reasonable ways fresh R session system requirements provided.","code":""},{"path":"https://gesistsa.github.io/rang/reference/apptainerize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create an Apptainer/Singularity Definition File of The Resolved Result — apptainerize","text":"Apptainer / Singularity Kurtzer, G. M., Sochat, V., & Bauer, M. W. (2017) Singularity: Scientific containers mobility compute. PLOS ONE, 12(5):e0177459. doi:10.1371/journal.pone.0177459 Rocker Project Ripley, B. (2005) Packages Management R 2.1.0. R News, 5(1):8--11.","code":""},{"path":[]},{"path":"https://gesistsa.github.io/rang/reference/apptainerize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Apptainer/Singularity Definition File of The Resolved Result — apptainerize","text":"","code":"# \\donttest{ if (interactive()) {     graph <- resolve(         pkgs = c(\"openNLP\", \"LDAvis\", \"topicmodels\", \"quanteda\"),         snapshot_date = \"2020-01-16\"     )     apptainerize(graph, \".\")     ## An example of using post_installation_steps to install quarto     install_quarto <- c(\"apt-get install -y curl git && \\\\     curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb && \\\\     dpkg -i quarto-linux-amd64.deb && \\\\     quarto install tool tinytex\")     apptainerize(graph, \".\", post_installation_steps = install_quarto) } # }"},{"path":"https://gesistsa.github.io/rang/reference/as_pkgrefs.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Structures into Package References — as_pkgrefs","title":"Convert Data Structures into Package References — as_pkgrefs","text":"generic function converts several standard data structures vector package references, turn can used first argument function resolve(). function guessimates possible sources packages. strongly recommend manually reviewing detected packages using resolve().","code":""},{"path":"https://gesistsa.github.io/rang/reference/as_pkgrefs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Structures into Package References — as_pkgrefs","text":"","code":"as_pkgrefs(x, ...)  # S3 method for default as_pkgrefs(x, ...)  # S3 method for character as_pkgrefs(x, bioc_version = NULL, no_enhances = TRUE, no_suggests = TRUE, ...)  # S3 method for sessionInfo as_pkgrefs(x, ...)"},{"path":"https://gesistsa.github.io/rang/reference/as_pkgrefs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Structures into Package References — as_pkgrefs","text":"x, currently supported data structure(s) : output sessionInfo(), character vector package names ..., used bioc_version character. x character vector, version Bioconductor search package names. NULL indicates search Bioconductor. no_enhances logical, parsing DESCRIPTION, whether ignore packages \"Enhances\" field no_suggests logical, parsing DESCRIPTION, whether ignore packages \"Suggests\" field","code":""},{"path":"https://gesistsa.github.io/rang/reference/as_pkgrefs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Structures into Package References — as_pkgrefs","text":"vector package references","code":""},{"path":"https://gesistsa.github.io/rang/reference/as_pkgrefs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Structures into Package References — as_pkgrefs","text":"","code":"as_pkgrefs(sessionInfo()) #> [1] \"cran::rang\" if (interactive()) {    require(rang)    graph <- resolve(as_pkgrefs(sessionInfo()))    as_pkgrefs(c(\"rtoot\"))    as_pkgrefs(c(\"rtoot\", \"S4Vectors\")) ## this gives cran::S4Vectors and is not correct.    as_pkgrefs(c(\"rtoot\", \"S4Vectors\"), bioc_version = \"3.3\") ## This gives bioc::S4Vectors }"},{"path":"https://gesistsa.github.io/rang/reference/convert_edgelist.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert Data Structures to rang edgelist — convert_edgelist","title":"Convert Data Structures to rang edgelist — convert_edgelist","text":"generic function converts several data structures provided rang edgelist package dependencies.","code":""},{"path":"https://gesistsa.github.io/rang/reference/convert_edgelist.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert Data Structures to rang edgelist — convert_edgelist","text":"","code":"convert_edgelist(x, ...)  # S3 method for default convert_edgelist(x, ...)  # S3 method for ranglet convert_edgelist(x, ...)  # S3 method for rang convert_edgelist(x, ...)"},{"path":"https://gesistsa.github.io/rang/reference/convert_edgelist.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert Data Structures to rang edgelist — convert_edgelist","text":"x, supported data structures rang ranglet S3 objects ..., used","code":""},{"path":"https://gesistsa.github.io/rang/reference/convert_edgelist.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert Data Structures to rang edgelist — convert_edgelist","text":"data frame directed edges dependencies","code":""},{"path":"https://gesistsa.github.io/rang/reference/convert_edgelist.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert Data Structures to rang edgelist — convert_edgelist","text":"resulting data frame can converted igraph object plotting analysis via function igraph::graph_from_data_frame()","code":""},{"path":"https://gesistsa.github.io/rang/reference/convert_edgelist.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert Data Structures to rang edgelist — convert_edgelist","text":"","code":"# \\donttest{ if (interactive()) {     graph <- resolve(pkgs = c(\"openNLP\", \"LDAvis\", \"topicmodels\", \"quanteda\"),                 snapshot_date = \"2020-01-16\")                      # dependency edgelist of a single package     convert_edgelist(graph$ranglets[[1]])          # full dependency edgelist     convert_edgelist(graph) } # }"},{"path":"https://gesistsa.github.io/rang/reference/create_turing.html","id":null,"dir":"Reference","previous_headings":"","what":"Create executable research compendium according to the Turing Way — create_turing","title":"Create executable research compendium according to the Turing Way — create_turing","text":"usethis-style function creates executable research compendium according Turing Way.","code":""},{"path":"https://gesistsa.github.io/rang/reference/create_turing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create executable research compendium according to the Turing Way — create_turing","text":"","code":"create_turing(   path,   add_rang = TRUE,   add_makefile = TRUE,   add_here = TRUE,   verbose = TRUE,   force = FALSE,   apptainer = FALSE )"},{"path":"https://gesistsa.github.io/rang/reference/create_turing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create executable research compendium according to the Turing Way — create_turing","text":"path character, path project root add_rang logical, whether run use_rang() path add_makefile logical, whether insert barebone Makefile project root. add_here logical, whether insert hidden .file project root verbose logical, whether print messages force logical, whether overwrite files (inst/rang/update.R, Makefile, .) exist. apptainer logical, whether use apptainer. FALSE indicates using Docker","code":""},{"path":"https://gesistsa.github.io/rang/reference/create_turing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create executable research compendium according to the Turing Way — create_turing","text":"path, invisibly","code":""},{"path":"https://gesistsa.github.io/rang/reference/create_turing.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create executable research compendium according to the Turing Way — create_turing","text":"According Turing Way, executable research compendium following properties Files organized conventional folder structure; Data, methods, output clearly separated; computational environment specified. use structure suggested Turing Way: data_raw: directory hold raw data data_clean: directory hold processed data code: directory hold computer code CITATION: file holding citation information paper.Rmd: manuscript function provides clearly separated organizational structure. Components can changed. example, manuscript can another format (e.g. quarto, sweave) even optional. add_rang, computational environment can recorded reconstructed later.","code":""},{"path":"https://gesistsa.github.io/rang/reference/create_turing.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create executable research compendium according to the Turing Way — create_turing","text":"Turing Way: Research Compendia Gorman, KB, Williams TD. Fraser WR (2014). Ecological Sexual Dimorphism Environmental Variability within Community Antarctic Penguins (Genus Pygoscelis). PLoS ONE 9(3):e90081. doi:10.1371/journal.pone.0090081","code":""},{"path":[]},{"path":"https://gesistsa.github.io/rang/reference/dockerize.html","id":null,"dir":"Reference","previous_headings":"","what":"Dockerize The Resolved Result — dockerize","title":"Dockerize The Resolved Result — dockerize","text":"function exports result resolve() Docker file. R version >= 3.1.0, Dockerfile based versioned Rocker image. R version < 3.1.0, Dockerfile based Debian compiles R source.","code":""},{"path":"https://gesistsa.github.io/rang/reference/dockerize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dockerize The Resolved Result — dockerize","text":"","code":"dockerize(   rang,   output_dir,   materials_dir = NULL,   post_installation_steps = NULL,   image = c(\"r-ver\", \"rstudio\", \"tidyverse\", \"verse\", \"geospatial\"),   rang_as_comment = TRUE,   cache = FALSE,   verbose = TRUE,   lib = NA,   cran_mirror = \"https://cran.r-project.org/\",   check_cran_mirror = TRUE,   bioc_mirror = \"https://bioconductor.org/packages/\",   no_rocker = FALSE,   debian_version = c(\"lenny\", \"squeeze\", \"wheezy\", \"jessie\", \"stretch\"),   skip_r17 = TRUE,   insert_readme = TRUE,   copy_all = FALSE,   method = c(\"auto\", \"evercran\", \"rocker\", \"debian\") )  dockerize_rang(...)  dockerise(...)  dockerise_rang(...)"},{"path":"https://gesistsa.github.io/rang/reference/dockerize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dockerize The Resolved Result — dockerize","text":"rang output resolve() output_dir character, put Docker file associated content materials_dir character, path directory containing additional resources (e.g. analysis scripts) copied output_dir turn Docker container post_installation_steps character, additional steps added CMD part Dockerfile, see example image character, versioned Rocker image use. Can \"r-ver\", \"rstudio\", \"tidyverse\", \"verse\", \"geospatial\" applies R version >= 3.1 rang_as_comment logical, whether write resolved result steps reproduce file path comment cache logical, whether cache packages now. Please note system requirements cached. query non-CRAN packages, option strongly recommended. query local packages, must TRUE regardless R version. R version < 3.1, must also TRUE non-CRAN packages. verbose logical, pass install.packages(), negated value also passed quiet install.packages() download.file(). lib character, pass install.packages(). default, NA (install packages default location) cran_mirror character, CRAN mirror use check_cran_mirror logical, whether check CRAN mirror bioc_mirror character, Bioconductor mirror use no_rocker logical, whether skip using Rocker images even appropriate version available. Please keep FALSE unless know debian_version Rocker images used, EOL version Debian use. Can \"lenny\", \"etch\", \"squeeze\", \"wheezy\", \"jessie\", \"stretch\". Please keep default \"lenny\" unless know skip_r17 logical, whether skip R 1.7.x. Currently, possible compile R 1.7.x (R 1.7.0 R 1.7.1) method provided  rang. affects snapshot_date 2003-04-16 2003-10-07. skip_r17 TRUE snapshot_date within aforementioned range, R 1.8.0 used instead insert_readme logical, whether insert README file copy_all logical, whether copy everything current directory container. inst/rang detected output_dir, coerced TRUE. method character, can \"auto\", \"evercran\", \"rocker\", \"debian\". Select base image used. \"auto\" (default) selects best option based R version. \"evercran\" experimental. ... arguments passed dockerize","code":""},{"path":"https://gesistsa.github.io/rang/reference/dockerize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dockerize The Resolved Result — dockerize","text":"output_dir, invisibly","code":""},{"path":"https://gesistsa.github.io/rang/reference/dockerize.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dockerize The Resolved Result — dockerize","text":"idea behind determine installation order R packages locally. , installation script can deployed another fresh R session install R packages. dockerize() apptainerize() reasonable ways fresh R session system requirements provided.","code":""},{"path":"https://gesistsa.github.io/rang/reference/dockerize.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dockerize The Resolved Result — dockerize","text":"Rocker Project Ripley, B. (2005) Packages Management R 2.1.0. R News, 5(1):8--11.","code":""},{"path":[]},{"path":"https://gesistsa.github.io/rang/reference/dockerize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dockerize The Resolved Result — dockerize","text":"","code":"# \\donttest{ if (interactive()) {     graph <- resolve(pkgs = c(\"openNLP\", \"LDAvis\", \"topicmodels\", \"quanteda\"),                     snapshot_date = \"2020-01-16\")     dockerize(graph, \".\")     ## An example of using post_installation_steps to install quarto     install_quarto <- c(\"RUN apt-get install -y curl git && \\\\     curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb && \\\\     dpkg -i quarto-linux-amd64.deb && \\\\     quarto install tool tinytex\")     dockerize(graph, \".\", post_installation_steps = install_quarto) } # }"},{"path":"https://gesistsa.github.io/rang/reference/export_rang.html","id":null,"dir":"Reference","previous_headings":"","what":"Export The Resolved Result As Installation Script — export_rang","title":"Export The Resolved Result As Installation Script — export_rang","text":"function exports results resolve() installation script can run fresh R environment.","code":""},{"path":"https://gesistsa.github.io/rang/reference/export_rang.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export The Resolved Result As Installation Script — export_rang","text":"","code":"export_rang(   rang,   path,   rang_as_comment = TRUE,   verbose = TRUE,   lib = NA,   cran_mirror = \"https://cran.r-project.org/\",   check_cran_mirror = TRUE,   bioc_mirror = \"https://bioconductor.org/packages/\" )"},{"path":"https://gesistsa.github.io/rang/reference/export_rang.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export The Resolved Result As Installation Script — export_rang","text":"rang output resolve() path character, path exported installation script rang_as_comment logical, whether write resolved result steps reproduce file path comment verbose logical, pass install.packages(), negated value also passed quiet install.packages() download.file(). lib character, pass install.packages(). default, NA (install packages default location) cran_mirror character, CRAN mirror use check_cran_mirror logical, whether check CRAN mirror bioc_mirror character, Bioconductor mirror use","code":""},{"path":"https://gesistsa.github.io/rang/reference/export_rang.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export The Resolved Result As Installation Script — export_rang","text":"path, invisibly","code":""},{"path":"https://gesistsa.github.io/rang/reference/export_rang.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export The Resolved Result As Installation Script — export_rang","text":"idea behind determine installation order R packages locally. , installation script can deployed another fresh R session install R packages. dockerize() apptainerize() reasonable ways fresh R session system requirements provided.","code":""},{"path":"https://gesistsa.github.io/rang/reference/export_rang.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Export The Resolved Result As Installation Script — export_rang","text":"Ripley, B. (2005) Packages Management R 2.1.0. R News, 5(1):8--11.","code":""},{"path":[]},{"path":"https://gesistsa.github.io/rang/reference/export_rang.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export The Resolved Result As Installation Script — export_rang","text":"","code":"# \\donttest{ if (interactive()) {     graph <- resolve(pkgs = c(\"openNLP\", \"LDAvis\", \"topicmodels\", \"quanteda\"),                     snapshot_date = \"2020-01-16\")     export_rang(graph, \"rang.R\") } # }"},{"path":"https://gesistsa.github.io/rang/reference/export_renv.html","id":null,"dir":"Reference","previous_headings":"","what":"Export The Resolved Result As a renv Lockfile — export_renv","title":"Export The Resolved Result As a renv Lockfile — export_renv","text":"function exports results resolve() renv lockfile can used alternative docker container.","code":""},{"path":"https://gesistsa.github.io/rang/reference/export_renv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export The Resolved Result As a renv Lockfile — export_renv","text":"","code":"export_renv(rang, path = \".\")"},{"path":"https://gesistsa.github.io/rang/reference/export_renv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export The Resolved Result As a renv Lockfile — export_renv","text":"rang output resolve() path character, path exported renv lockfile","code":""},{"path":"https://gesistsa.github.io/rang/reference/export_renv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export The Resolved Result As a renv Lockfile — export_renv","text":"path, invisibly","code":""},{"path":"https://gesistsa.github.io/rang/reference/export_renv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export The Resolved Result As a renv Lockfile — export_renv","text":"renv lockfile easier handle docker container, always reliably reproduce exact computational environment,especially old code.","code":""},{"path":"https://gesistsa.github.io/rang/reference/export_renv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export The Resolved Result As a renv Lockfile — export_renv","text":"","code":"# \\donttest{ if (interactive()) {     graph <- resolve(pkgs = c(\"openNLP\", \"LDAvis\", \"topicmodels\", \"quanteda\"),                     snapshot_date = \"2020-01-16\")     export_renv(graph, \".\") } # }"},{"path":"https://gesistsa.github.io/rang/reference/generate_installation_order.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Data Frame of The Resolved Result\nThis function exports the results from resolve() to a data frame, which each row represents one installation step. The order of rows is the installation order. By installing packages in the specified order, one can install all the resolved packages without conflicts. — generate_installation_order","title":"Create a Data Frame of The Resolved Result\nThis function exports the results from resolve() to a data frame, which each row represents one installation step. The order of rows is the installation order. By installing packages in the specified order, one can install all the resolved packages without conflicts. — generate_installation_order","text":"Create Data Frame Resolved Result function exports results resolve() data frame, row represents one installation step. order rows installation order. installing packages specified order, one can install resolved packages without conflicts.","code":""},{"path":"https://gesistsa.github.io/rang/reference/generate_installation_order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Data Frame of The Resolved Result\nThis function exports the results from resolve() to a data frame, which each row represents one installation step. The order of rows is the installation order. By installing packages in the specified order, one can install all the resolved packages without conflicts. — generate_installation_order","text":"","code":"generate_installation_order(rang)"},{"path":"https://gesistsa.github.io/rang/reference/generate_installation_order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Data Frame of The Resolved Result\nThis function exports the results from resolve() to a data frame, which each row represents one installation step. The order of rows is the installation order. By installing packages in the specified order, one can install all the resolved packages without conflicts. — generate_installation_order","text":"rang output resolve()","code":""},{"path":"https://gesistsa.github.io/rang/reference/generate_installation_order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Data Frame of The Resolved Result\nThis function exports the results from resolve() to a data frame, which each row represents one installation step. The order of rows is the installation order. By installing packages in the specified order, one can install all the resolved packages without conflicts. — generate_installation_order","text":"data frame ordered installation order.","code":""},{"path":"https://gesistsa.github.io/rang/reference/generate_installation_order.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a Data Frame of The Resolved Result\nThis function exports the results from resolve() to a data frame, which each row represents one installation step. The order of rows is the installation order. By installing packages in the specified order, one can install all the resolved packages without conflicts. — generate_installation_order","text":"Ripley, B. (2005) Packages Management R 2.1.0. R News, 5(1):8--11.","code":""},{"path":"https://gesistsa.github.io/rang/reference/generate_installation_order.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Data Frame of The Resolved Result\nThis function exports the results from resolve() to a data frame, which each row represents one installation step. The order of rows is the installation order. By installing packages in the specified order, one can install all the resolved packages without conflicts. — generate_installation_order","text":"","code":"# \\donttest{ if (interactive()) {     graph <- resolve(pkgs = c(\"openNLP\", \"LDAvis\", \"topicmodels\", \"quanteda\"),                     snapshot_date = \"2020-01-16\")     generate_installation_order(graph) } # }"},{"path":"https://gesistsa.github.io/rang/reference/query_sysreqs.html","id":null,"dir":"Reference","previous_headings":"","what":"Query for System Requirements — query_sysreqs","title":"Query for System Requirements — query_sysreqs","text":"function takes S3 object returned resolve() (re)queries System Requirements.","code":""},{"path":"https://gesistsa.github.io/rang/reference/query_sysreqs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query for System Requirements — query_sysreqs","text":"","code":"query_sysreqs(rang, os = \"ubuntu-20.04\")"},{"path":"https://gesistsa.github.io/rang/reference/query_sysreqs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query for System Requirements — query_sysreqs","text":"rang output resolve() os character, OS query system requirements","code":""},{"path":"https://gesistsa.github.io/rang/reference/query_sysreqs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query for System Requirements — query_sysreqs","text":"rang S3 object following items call original function call ranglets List dependency graphs packages pkgs snapshot_date snapshot_date no_enhances no_enhances no_suggests no_suggests unresolved_pkgsrefs Packages resolved sysreqs System requirements Linux commands r_version latest R version snapshot_date os os","code":""},{"path":[]},{"path":"https://gesistsa.github.io/rang/reference/query_sysreqs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query for System Requirements — query_sysreqs","text":"","code":"# \\donttest{ if (interactive()) {     graph <- resolve(pkgs = c(\"openNLP\", \"LDAvis\", \"topicmodels\", \"quanteda\"),                 snapshot_date = \"2020-01-16\", query_sysreqs = FALSE)     graph$sysreqs     graph2 <- query_sysreqs(graph, os = \"ubuntu-20.04\")     graph2$sysreqs } # }"},{"path":"https://gesistsa.github.io/rang/reference/recipes.html","id":null,"dir":"Reference","previous_headings":"","what":"Recipes for Building Container Images — recipes","title":"Recipes for Building Container Images — recipes","text":"list containing several useful recipes container building. Useful post_installation_steps argument dockerize(). Available recipes : texlive: install pandoc LaTeX, useful rendering RMarkdown texlivefull: Similar , install full distribution TeX Live (~ 3GB) quarto: install quarto tinytex clean: clean container image removing cache make: install GNU make","code":""},{"path":"https://gesistsa.github.io/rang/reference/recipes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recipes for Building Container Images — recipes","text":"","code":"recipes"},{"path":"https://gesistsa.github.io/rang/reference/recipes.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Recipes for Building Container Images — recipes","text":"object class list length 5.","code":""},{"path":"https://gesistsa.github.io/rang/reference/recipes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recipes for Building Container Images — recipes","text":"","code":"# \\donttest{ if (interactive()) {     graph <- resolve(pkgs = c(\"openNLP\", \"LDAvis\", \"topicmodels\", \"quanteda\"),                     snapshot_date = \"2020-01-16\")     ## install texlive     dockerize(graph, \".\", post_installation_steps = recipes[['texlive']]) } # }"},{"path":"https://gesistsa.github.io/rang/reference/resolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve Dependencies Of R Packages — resolve","title":"Resolve Dependencies Of R Packages — resolve","text":"function recursively queries dependencies R packages specific snapshot time. dependency graph can used recreate computational environment. data dependencies provided R-hub.","code":""},{"path":"https://gesistsa.github.io/rang/reference/resolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve Dependencies Of R Packages — resolve","text":"","code":"resolve(   pkgs = \".\",   snapshot_date,   no_enhances = TRUE,   no_suggests = TRUE,   query_sysreqs = TRUE,   os = \"ubuntu-20.04\",   verbose = FALSE )"},{"path":"https://gesistsa.github.io/rang/reference/resolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve Dependencies Of R Packages — resolve","text":"pkgs pkgs can 1) character vector R packages resolve, 2) path renv lockfile, 3) data structure as_pkgrefs() can convert character vector package references. 1) pkgs can either shorthands, e.g. \"rtoot\", \"ropensci/readODS\", package references, e.g. \"cran::rtoot\", \"github::ropensci/readODS\". Please refer Package References documentation pak details. Currently, package supports cran github packages. 2) as_pkgrefs() support output sessionInfo(), renv lockfile single directory. single directory, R scripts scanned R packages used using renv::dependencies(). Currently, default scan R scripts current working directory. Please also note scanning assumes CRAN Bioconductor packages. strongly recommend checking whether really case (see example ). snapshot_date Snapshot date, specified, assume month ago no_enhances logical, whether ignore packages \"Enhances\" field no_suggests logical, whether ignore packages \"Suggests\" field query_sysreqs logical, whether query System Requirements. Important: Archived CRAN queried system requirements. packages assumed system requirement. os character, OS query system requirements verbose logical, whether display messages","code":""},{"path":"https://gesistsa.github.io/rang/reference/resolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve Dependencies Of R Packages — resolve","text":"rang S3 object following items call original function call ranglets List dependency graphs packages pkgs snapshot_date snapshot_date no_enhances no_enhances no_suggests no_suggests unresolved_pkgsrefs Packages resolved sysreqs System requirements Linux commands r_version latest R version snapshot_date os os","code":""},{"path":"https://gesistsa.github.io/rang/reference/resolve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Resolve Dependencies Of R Packages — resolve","text":"Package References","code":""},{"path":[]},{"path":"https://gesistsa.github.io/rang/reference/resolve.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve Dependencies Of R Packages — resolve","text":"","code":"# \\donttest{ if (interactive()) {     graph <- resolve(pkgs = c(\"openNLP\", \"LDAvis\", \"topicmodels\", \"quanteda\"),                 snapshot_date = \"2020-01-16\")     graph     ## to resolve github packages     gh_graph <- resolve(pkgs = c(\"https://github.com/schochastics/rtoot\"),                    snapshot_date = \"2022-11-28\")     gh_graph     ## scanning     graph <- resolve(snapshot_date = \"2022-11-28\")     ## But we recommend this:     pkgs <- as_pkgrefs(\".\")     pkgs ## check the accuracy     graph <- resolve(pkgs, snapshot_date = \"2022-11-28\") } # }"},{"path":"https://gesistsa.github.io/rang/reference/use_rang.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup rang for a directory — use_rang","title":"Setup rang for a directory — use_rang","text":"usethis-style function adds infrastructure directory (presumably R scripts data) (re)constructing computational environment. Specifically, function inserts inst/rang directory, contains components reconstruction. Optionally, Makefile .also inserted ease development analytic code. default, (re)running function overwrite file. One can change setting force TRUE.","code":""},{"path":"https://gesistsa.github.io/rang/reference/use_rang.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup rang for a directory — use_rang","text":"","code":"use_rang(   path = \".\",   add_makefile = TRUE,   add_here = TRUE,   verbose = TRUE,   force = FALSE,   apptainer = FALSE )"},{"path":"https://gesistsa.github.io/rang/reference/use_rang.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup rang for a directory — use_rang","text":"path character, path project root add_makefile logical, whether insert barebone Makefile project root. add_here logical, whether insert hidden .file project root verbose logical, whether print messages force logical, whether overwrite files (inst/rang/update.R, Makefile, .) exist. apptainer logical, whether use apptainer. FALSE indicates using Docker","code":""},{"path":"https://gesistsa.github.io/rang/reference/use_rang.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup rang for a directory — use_rang","text":"path, invisibly","code":""},{"path":"https://gesistsa.github.io/rang/reference/use_rang.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Setup rang for a directory — use_rang","text":"infrastructure added path consists : inst/rang directory project root update.R file inside directory .project root (add_here TRUE) Makefile project root (add_makefile TRUE) might need edit update.R manually. default scan whole project used R packages assume either CRAN Bioconductor. used R packages, might need edit manually.","code":""}]
